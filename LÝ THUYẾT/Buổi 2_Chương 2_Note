CHƯƠNG 2: CẤU TRÚC HỆ ĐIỀU HÀNH
I. Các thành phần của hệ điều hành:
- Quản lý tiến trình: điều phối việc sử dụng CPU để thực thi các tiến trình của mình.
- Quản lý bộ nhớ chính.
- Quản lý file: bao gồm tập tin và thư mục.
- Quản lý hệ thống I/O.
- Quản lý hệ thống lưu trữ thứ cấp.
- Hệ thống bảo vệ.
- Hệ thống thông dịch lệnh.
1.1. Quản lý tiến trình:
- Để hoàn thành công việc, một tiến trình cần: CPU, Bộ nhớ, File, Thiết bị I/O...
- Các nhiệm vụ chính:
+ Tạo và hủy tiến trình.
+ Tạm dừng và thực thi tiếp tiến trình.
+ Cung cấp các cơ chế:
  Đồng bộ hoạt động các tiến trình.
  Giao tiếp giữa các tiến trình.
  Khống chế tắc nghẽn.
----QUIZ----
Câu 1: Để hoàn thành công việc, một tiến trình KHÔNG bắt buộc phải có Thanh ghi, CPU, Bộ nhớ, Màn hình trong các tài nguyên phần cứng đã nêu trên?
Answer key: Màn hình.
Câu 2: Theo nội dung video bài giảng về các thành phần trong hệ điều hành mà ban vừa xem, thì thành phần nào sau đây không phải là 1 thành phần của hệ điều hành: Hệ thống bảo vệ, Quản lý tiểu trình, Quản lý tiến trình và Quản lý file?
Answer key: Quản lý tiểu trình.
1.2. Quản lý bộ nhớ chính:
- Trong sơ đồ phân cấp bộ nhớ: Kích thước nhỏ dần thì tốc độ nhanh dần.
- Bộ nhớ khả biến và bộ nhớ bất biến.
- Register (tập thanh ghi): nằm bên trong CPU và được cấu tạo bằng các flipflop khác nhau, bộ phận để lưu trữ các dữ liệu tính toán trực tiếp.
- Cache là bộ nhớ, nằm giữa Register và Main memory, khá giới hạn (trên dưới 8MB).
- Main memory (D-RAM)
- Bộ nhớ bất biến: ổ cứng SSD, HDD (không lấy ra được), đĩa từ, đĩa quang (lấy ra được) để cài đặt hệ điều hành, các chương trình trên nó.
- Resource monitor: coi được rõ ràng các tiến trình đang hoạt động.
- Bộ nhớ chính là trung tâm của các thao tác, xử lý.
- Để nâng cao hiệu suất sử dụng CPU. hệ điều hành cần quản lý bộ nhớ thích hợp.
- Các nhiệm vụ chính: 
+ Theo dõi, quản lý các vùng nhớ trống và đã cấp phát.
+ Quyết định sẽ nạp chương trình vào vị trí nào khi có vùng nhớ trống.
+ Cấp phát và thu hồi các vùng nhớ.
---QUIZ---
Câu 1: Quyết định sẽ nạp chương trình nào khi có vùng nhớ trống là chức năng của thành phần nào trong hệ điều hành?
Answer key: Quản lý bộ nhớ chính.
Câu 2: Chọn đáp án đúng theo thứ tự tăng dần về tốc độ truy cấp của bộ nhớ?
Answer key: HDD, SSD, RAM, Cache.
1.3. Quản lý file:
- Hệ thống file: file và thư mục.
- Các dịch vụ chinh:
+ Tạo và xóa file/thư mục.
+ Các thao tác xử lý file/thư mục như copy, paste...
+ "Ánh xạ" file/thư mục vào thiết bị thứ cáp tương ứng.
+ Sao lưu và phục hồi dữ liệu.
1.4. Quản lý hệ thống I/O:
- Thể hiện qua cửa sổ Device Manager.
- Che dấu sự khác biệt của các thiết bị I/O trước người dùng.
- Các chức năng:
+ Cơ chế: buffering (khi giao tiếp với phần cứng với tốc độ thấp và cao thì nó buffer những dữ liệu dạng tuần tự để nó đẩy qua phần cứng có tốc độ nhanh hơn 1 lần)
+ Cơ chế: spoiling (cũng giao tiếp, có 1 vùng spoil trên lưu trữ thứ cấp để nó lưu dữ liệu trước khi giao tiếp với các thiết bị nhanh hơn).
+ Cơ chế: caching (có thể thực thi trong nhiều kiến trúc khác nhau, processor nó muốn truy xuất 1 dữ liệu trên RAM thì nó sẽ cache lại số dữ liệu mà nó thường sử dụng trên bộ nhớ cache để lần sau truy xuất nhanh hơn).
+ Cung cấp giao diện chung đến các trình điều khiển thiết bị.
+ Bộ điều khiển các thiết bị phần cứng tương ứng.
1.5. Quản lý hệ thống lưu trữ thứ cấp:
- Hiển thị qua Disk Manager.
- Lý do phải quản lý ổ đĩa:
+ Bộ nhớ chính: kích thước nhỏ, là môi trường chứa thông tin không bên vứng
-> cần hệ thống lưu trữ thứ cấp để lưu trữ bền vững các dữ liệu, chương trình.
- Phương tiện lưu trữ thông dụng là HDD và SSD.
- Nhiệm vụ của hệ điều hành trong quản lý đĩa:
+ Quản lý không gian trống trên đĩa (free space management).
+ Cấp phát không gian lưu trữ (storage allocation).
+ Định thời hoạt động cho đĩa (disk scheduling).
--> Sử dụng thường xuyên --> Ảnh hưởng lớn đến tốc độ của cả hệ thống -> cần hiệu quả.
1.6. Hệ thống bảo vệ:
- Tốn tại ở như là Windows Security bảo vệ khỏi virus, khỏi các phần mền độc hại.
- Trong hệ thống cho phép nhiều user hay nhiều process diễn ra đồng thời:
+ Kiểm soát tiến trình người dùng đăng nhập/đăng xuất và sử dụng hệ thống.
+ Kiểm soát việc truy cập các tài nguyên trong hệ thống.
+ Bảo đảm những user/process chỉ được phép sử dụng các tài nguyên dành cho nó.
- Các nhiệm vụ của hệ thống bảo vệ:
+ Cung cấp cơ chế kiểm soát đăng nhập/xuất.
+ Phản định được sự truy cập tài nguyên hợp pháp và bất hợp pháp.
+ Phương diện thi hành các chính sách (enforcement of policies).
1.7. Hệ thống thông dịch lệnh:
- Command prompt.
- Là giao diện chủ yếu giữa người dùng và OS.
- Khi user login:
+ command line interpreter (shell) chạy, chờ nhận lệnh từ người dùng, thực thi lệnh và kết quả trả về.
+ Các lệnh -> bộ điều khiển lệnh -> hệ điều hành.
+ Các lệnh chủ yếu:
. Tạo, hủy và quản lý tiến trình, hệ thống.
. Kiểm soát I/O.
. Quản lý bộ lưu trữ thứ cấp.
. Quản lý bộ nhớ chính.
. Truy cập hệ thống file và cơ chế bảo maatsh.
---QUIZ---
Câu 1: Hệ thống thông dịch lệnh (Shell/Terminal) là gì?
Answer key: Là giao diện chủ yếu giữa người dùng và hệ điều hành.
Câu 2: Cung cấp giao diện chung đến các trình điều khiển thiết bị là chức nawg của thành phần nào trong hệ điều hành?
Answer key: Quản lý hệ thống I/O.
II. Các dịch vụ hệ điều hành cung cấp:
- Thực thi chương trình.
- Thực hiện các thao tác I/O theo yêu cầu của chương trình.
- Các thao tác trên hệ thống file.
- Trao đổi thông tin giữa các tiến trình qua 2 cách:
+ Chia sẻ bộ nhớ (Shared memory).
+ Chuyển thông điệp (Message passing).
- Phát hiện lỗi:
+ Trong CPU, bộ nhớ, trên thiết bị I/O (dữ liệu hư, hết giấy,...).
+ Do chương trình: chia cho 0, truy cập đến địa chỉ bộ nhớ không cho phép.
- Cấp phát tài nguyên (resource allocation):
+ Tài nguyên: CPU, bộ nhớ chính, ổ đĩa,...
+ OS có cấc routine tương ứng.
- Kế toán (accounting):
+ Nhằm lưu vết user để tính phí hoặc đơn giản để thống kê.
- Bảo vệ (protection) và an ninh (security):
+ Hai tiến trình khác nhau không được ảnh hưởng nhau.
+ Kiểm soát được các truy xuất tài nguyên của hệ thống.
+ Chỉ cấc user được phép sử dụng hệ thống mới truy cập được tài nguyên hệ thống (ví dụ thông qua username và password).
- Giao diện người dùng:
+ Hầu hết các hệ điều hành để có giao diện người dùng:
. Giao diện Command-Line (CLI).
+ Giao diện Graphics User Interface (GUI).
+ Giao diện Touch-screen.
III. Lời gọi hệ thống:
- Có 2 mode: user mode và kernel mode.
- Khi một tiến trình người dùng user process dùng user mode, muốn sử dụng phần cứng bên dưới thì gọi system call.
- Khi một system call được gọi thì nó sẽ chuyển sang cái mode kernel, thực thi system call rồi trả kết quả cho user process.
- Dùng để giao tiếp giữa tiến trình và hệ điều hành hay nói cách khác là cung cấp giao diện giữa tiến trình và hệ điều hành bằng cách gọi đến các dịch vụ mà hệ điều hành cung cấp.
+ Ví dụ: open, read, write file.
- Thông thường được viết bằng ngôn ngữ cấp cao (C/C++) và hầu hết được truy cập thông qua các Application Programming Interface (API).
- Có 3 APIs thông dụng là Win32 API cho Windows, POSIS API cho POSIX-based systems (bao gồm tất cả các phiên bản UNIX, Linux và Mac OS X), và Java API cho các máy ảo Java (JVM)>
- Ba phương pháp truyền tham số khi sử dụng system call:
+ Qua thanh ghi.
+ Qua một vùng nhớ, địa chỉ của vùng nhớ được gởi đến hệ điều hành qua thanh ghi.
+ Qua stack.
- Khi một ứng dụng của người dùng muốn mở 1 file nào đó thì nó sẽ gọi một file là open() ở đây, system call thông qua system call interface để chuyển xuống kernel mode và chuyển xuống system call open.
- Truyền tham số: Vd tham số truyền vào 13 là X là tham số cho system call, user mode load địa chỉ vào thanh ghi, sử dụng các tham số từ cái table X (vị trí ô nhớ mà tham số năm ở đó) 
- Để tạo một tiến trình: Windows (CreateProcess) còn Linux thì khác.
---QUIZ---
Câu 1: Phương pháp qua thanh ghi, qua stack, qua một vùng nhớ, địa chỉ của vùng nhớ được gửi đến hệ điều hành qua thanh ghi, qua message thì phương pháp nào không phải là phương pháp truyền tham số khi sử dụng lời gọi hệ thống?
Answer key: Qua message.
Câu 2: Để giao tiếp giữa tiến trình về hệ điều hành thì dùng?
Answer key: Lời gọi hệ thống.
IV. Các chương trình hệ thống:
- Bao gồm các system call bên trong để thực hiện các tác vụ nào đó.
- Chương trình hệ thống (system program, phân biệt với application program) gồm:
+ Quản lý hệ thống file: như create, delete, rename, list.
+ Thông tin trạng thái: như date, time, dung lượng bộ nhớ trống.
+ Soạn thảo file: như file editor.
+ Hỗ trợ ngôn ngữ lập trình: như compiler, assembler, interpreter.
+ Nạp, thực thi, giúp tìm lỗi chương trình: như loader, debugger.
+ Giao tiếp: như email, task, web browser...
- Người dùng chủ yếu làm việc thông qua các system program (không làm việc trực tiếp với các system call).
V. Cấu trúc của hệ điều hành:
- Hệ điều hành là một chương trình.
- Nó có nhiều dạng cấu trúc khác nhau:
+ Cấu trúc Monolithic - Original UNIX.
+ Cấu trúc Layered Approach.
+ Cấu trúc Microkernels.
+ Cấu trúc Modules.
+ Cấu trúc Hybrid Systems.
V.1. Cấu trúc Monolithic - Original UNIX.
- UNIX - do giới hạn về chức năng phần cứng nên Original UNIX cũng có cấu trúc rất giới hạn.
- Gồm 2 nhân tách rời nhau:
+ Nhân (cung cấp file system, CPU Scheduling, memory management, và một số chức năng khác).
+ System program.
V.2. Cấu trúc Layered Approach:
- Hệ điều hành được chia thành nhiều lớp (layer):
+ Lớp dưới cùng: hardware.
+ Lớp trên cùng là giao tiếp với user.
+ Lớp trên chỉ phụ thuộc lớp dưới.
+ Một lớp chỉ có thể gọi các hàm của lớp dưới và các hàm của nó được gọi bởi lớp trên.
+ Ví dụ: Hệ điều hành THE.
V.3. Cấu trúc Microkernel:
- Phân chia module theo microkernel (CMU Mach OS, 1980).
- Chuyển một số chức năng của OS từ kernel space sang user space.
- Thu gọn kernel -> microkernel, microkernel chỉ bao gồm các chức năng tối thiểu như quản lý tiến trình, bộ nhớ và cơ chế giao tiếp giữa các tiến trình.
- Giao tiếp giữa các user mode qua cơ chế truyền thông điệp., thông qua message.
V.4. Cấu trúc Modules:
- Nhiều hệ điều hành hiện đại triển khai các loadable kernel modules (LKMs).
+ Sử dụng cách tiếp cận hướng dối tượng.
+ Mỗi core thành phần là tách biệt nhau.
+ Trao đổi thông qua các interfaces.
+ Mỗi module như là một phần của nhân.
- Nhìn chung, cấu trúc Modules giống với cấu trúc Layer nhưng phức tạp, ví dụ như Linux, Solaries.
- Linux dựa theo cấu trúc monolithic được thiết kế theo dạng Modules.
+ Bao gồm các applications bên trên kernels dưới, giao tiếp qua system call interfaces để giao tiếp với hardware thông qua device drivers.
V.5. Cấu trúc Hybrid Systems:
- Hầu hết các hệ điều hành hiện đại không theo một cấu trúc thuần túy nào mà lai giữa các cấu trúc với nhau:
+ Cấu trúc lai là sự kết hợp nhiều cách tiếp cận để giải quyết các nhu cầu về hiệu suất, bảo mật, nhu cầu sử dụng.
+ Nhân Linux, Solaries theo cấu trúc kết hợp không gian địa chỉ kernel, cấu trúc Monolithics và Modules.
+ Nhân Windows hầu như theo cấu trúc liền khối, cộng với cấu trúc vi nhân cho các hệ thống cá nhân khác nhau.
- MacOS, iOS: bên trên là application, tiếp theo là những cái user experience, application framework, core frameworks, kernel environment (Darwin).
- Cấu trúc Darwin: bao gồm BSD (POSIX) system calls, kernel sẽ có thành phần quan trọng như scheduling, IPC (giao tiếp giữa các tiến trình với nhau), memory managemnent.
- Kiến trúc Android:
+ Được phát triển bởi Open Handset Aliance (Google).
+ Được phát triển dựa trên nhân Linux.
+ Môi trường chạy bao gồm tập các thư viện API và máy ảo ART VM.
+ Thư viện bao gồm các frameworks cho web browser, database, multimedia,...
---QUIZ---
Câu 1: Hệ điều hành được xây dựng theo cấu trúc phân lớp (layer) KHÔNG có đặc điểm nào dưới đây?
Answer key: Các lớp giao tiếp với nhau qua cơ chế truyền thông điệp.
Câu 2: Đặc điểm nào dưới đây là cấu trúc vi nhân (microkernels):
Answer key: Một số chức năng của hệ điều hành được chuyển từ kernel space sang user space. \
