CHƯƠNG I: TỔNG QUAN VỀ HỆ ĐIỀU HÀNH
I. Tổng quan về hệ điều hành: 
1.1. Tổng quan:
- Một số hệ điều hành thường gặp: Android (Smartphone, Tablet, TV), Windows (version mới nhất là Windows 11), ios (dành cho các thiết bị di động), masOS (máy tính Apple), Linux,...
- Hệ điều hành là chương trình trung gian giữa phần cứng máy tính và người sử dụng, có chức năng điều khiển và phối hợp việc sử dụng phần cứng và cung cấp các dịch vụ cơ bản cho các ứng dụng.
- Mục tiêu của hệ điều hành:
+ Giúp người dùng dễ dàng sử dụng hệ thống.
+ Quản lý và cấp phát tài nguyên hệ thống một cách hiệu quả.
1.2. Cấu trúc hệ thống máy tính:
- Cấu trúc hệ thống gồm 4 phần: user, application program, operating program, computer hardwware.
+ Phần cứng (hardware): Bao gồm các tài nguyên cơ bản của máy tính như CPU, bộ nhớ, các thiết bị I/O. Hardware bao gồm: Physical device, Microprogramming, Machine language.
+ Hệ điều hành là một phần của system programs: operating system, compilers, editors, và operating system.
+ Hệ điều hành: Phân phối tài nguyên, điều khiển và phối hợp các hoạt động của các chương trình trong hệ thống. 
+ Chương trình ứng dụng (application programs): Sử dụng hệ thống tài nguyên để giải quyết một bài toán tính toán nào đó của người sử dụng. Ví dụ: compilers, database systems, video games, business programs,...
+ User: không chỉ là người dùng, có thể là máy tính khác đang tương tác với máy tính.
1.3. Sự cần thiết của hệ điều hành:
- Quản lý phần cứng máy tính.
- Cung cấp giao diện của người dùng.
- Là nơi để người dùng cài đặt các chương trình ứng dụng.
- Kết nối các thiết bị phần cứng với nhau.
- Tương tác giữa các chương trình với nhau và với phần cứng.
1.4. Bên trong hệ điều hành:
- Chương trình duy nhất luôn chạy tại tất cả các thời điểm máy tính hoạt động là nhân/hạt nhân (kernel).
- Đi kèm với nhân còn có 2 loại chương trình:
+ Chương trình hệ thống (system program): được đóng gói cùng với hệ điều hành nhưng không phải là một phần của nhân.
+ Chương trình ứng dụng: tất cả các chương trình không có liên kết (associate) với hoạt động của hệ thống.
- Ngày nay, một số hệ điều hành còn chứa middleware - một tập các khung/nền tảng phần mềm (software framework) cung cấp các dịch vụ bổ sung hỗ trợ cho các nhà phát triển ứng dụng như cơ sở đữ liệu đa phương tiện, đồ họa,...
----QUIZ---
1. Chọn đáp án đúng trong các đáp án sau để điền vào chỗ trống trong định nghĩa về hệ điều hành. "Hệ điều hành là chương trình trung gian giữa ... và người sử dụng".
Answer key: Phần cứng máy tính.
2. Mục đích chính của hệ điều hành là gì?
+ Quản lý và cấp phát tài nguyên hệ thống một cách hiệu quả.
+ Giúp người dùng dễ dàng sử dụng hệ thống.
3. Bộ phận nào KHÔNG phải là một thành phần chính trong cấu trúc hệ thống máy tính?
Answer key: Màn hình.
II. Hoạt động bên trong máy tính:
- Một máy tính hiện nay gồm CPU (một hoặc nhiều) và các trình điều khiển thiết bị (device controller) kết nối với nhau thông qua bus để truy xuất bộ nhớ chia sẻ (shared memory).
- Ví dụ: disk controller: giao tiếp giữa ổ đĩa với CPU, hoặc các thành phần khác thông qua system bus; USB controller: giao tiếp giữa chuột, bàn phím, máy in,... và graphics adapter ra màn hình máy tính.
- Các trình điều khiển thiết bị sẽ kết nối với nhau qua bus hệ thống để truy xuất đến memory chung này.
- Các thiết bị nhập/xuất (I/O) và CPU có thể thực thi đồng thời (concurrently).
- Mỗi trình điều khiển thiết bị chịu trách nhiệm một loại thiết bị cụ thể, có một bộ đệm (buffer) cục bộ (local).
- Mỗi loại trình điều khiển thiết bị có một device driver tương ứng của hệ điều hành để quản lý nó.
2.1. Ngắt (Interrupts):
- Đặc điểm cơ bản của ngắt:
+ Ngắt chuyển điều khiển đến interrupt service routine thông qua interrupt vector (chứa địa chỉ của tất cả các service routine).
+ Kiến trúc ngắt phải lưu địa chỉ của lệnh phát sinh ngắt.
+ Ngắt được tạo ra bởi phần mềm do một lỗi (error) hoặc do một yêu cầu của người dùng (user request) được gọi là trap hoặc exception.
+ Hệ điều hành hoạt động hướng theo ngắt (interrupt driven).
- Qúa trình phát sinh và xử lý ngắt:
Khi có 1 input/output request, nó sẽ thực thi cái mode là transfering, là di chuyển dữ liệu. Khi mà việc di chuyển dữ liệu xong, thì tạo ra 1 interrupt signal, báo tới CPU và CPU ngưng việc thực thi chương trình hiện tại và sẽ chạy tới chương trình phục vụ cái app đó. Và nó chuyển cái mode interrupt hangle, thực thi cái ngắt.
- Quy trình xử lý ngắt:
+ Hệ điều hành lưu giữ trạng thái của CPU bằng cách lưu thanh ghi và bộ đếm chương trình.
+ Xác định loại ngắt đã xảy ra.
+ Thực thi mã xử lý tương ứng với từng loại ngắt.
- Khi CPU đang chạy, nó có 1 break khởi tạo, thì sau đó nó khởi tạo input/output tương ứng với cái break đó. Khi cái hoạt động output/input xảy ra (khi input ready, output hoàn thành hoặc có 1 cái lỗi gì đó xảy ra trong quá trình đó) sẽ tạo ra 1 interrupt signal thì trong quá trình I/O hoạt động thì CPU thực thi kiểm tra interrupt giữa các lệnh và khi mà CPU nhận được interrupt thì nó sẽ chuyển quyền điều khiển tới interrupt handler. Sau đó thì interrupt handler sẽ xử lý dữ liệu liên quan tới ngắt, sau đó thì CPU resume lại công việc trước khi ngắt xảy ra.
2.2. Cấu trúc lưu trữ (storage):
- Hệ thống lưu trữ được tổ chức phân cấp dựa trên:
+ Tốc độ truy xuất (speed).
+ Chi phí (cost).
+ Khả năng lưu trữ dữ liệu khi không có nguồn điện (volatility).
- Phân cấp lưu trữ:
+ Càng về trên thì thời gian truy xuất càng nhanh và khả năng lưu trữ càng nhỏ và ngược lại.
+ Có 2 loại: 
  Khả biến (Bay hơi) (Main memory, Cache, Registers), khi mà ta tắt máy thì không lưu trữ dữ liệu nữa.
  Bất khả biến (Secondary Storage): có thể lấy ra được khỏi máy: như đĩa quang, đĩa từ.
+ Ở đỉnh là Register, nằm bên trong CPU, nhanh nhất, có dung lượng nhỏ.
+ Cache trong CPU, là bộ nhớ đệm, có 3 cấp độ L1, L2, L3.
+ Main memory (D-RAM): khoảng 4GB, 8GB, 16GB, 32GB.
+ Không bay hơi: SSD, HDD, lưu trữ hệ điều hành, các file.
- Bộ nhớ chính (main memory) - thiết bị lưu trữ dung lượng lớn duy nhất mà CPU truy xuất trực tiếp.
+ Truy xuất ngẫu nhiên (Random Access).
+ Mất dữ liệu khi không có nguồn điện.
+ Được xây dựng dựa trên công nghệ bán dẫn Dynamic Random-Access Memory (DRAM).
- Bộ nhớ thứ cấp (secondary storage) - mở rộng cho bộ nhớ chính để cung cấp khả năng lưu trữ không bay hơi dung lượng lớn.
2.3. Cấu trúc nhập/xuất:
- Cách 1: Sau khi nhập/xuất bắt đầu, quyền điều khiển chỉ được trả lại chương trình người dùng khi nhập/xuất hoàn tất.
+ Sử dụng ngắt để xử lý.
+ Chỉ một yêu cầu nhập/xuất được xử lý tại một thời điểm.
+ CPU phải chờ đến khi ngắt kế tiếp được phát sinh.
+ Chỉ phù hợp cho việc di chuyển một lượng nhỏ dữ liệu.
- Cách 2: Sau khi nhập/xuất bắt đầu, quyền điều khiển trả lại chương trình người dùng mà không cần chờ nhập/xuất hoàn tất.
+ Sử dụng cơ chế truy xuất một bộ nhớ trực tiếp (direct memory access - DMA).
+ Không cần sử dụng CPU.
+ Thích hợp cho việc di chuyển lượng lớn dữ liệu.
- Khi CPU phát ra 1 yêu cầu đọc dữ liệu, có 2 cách, 1 là dữ liệu giao tiếp trục tiếp với CPU, 2 là dữ liệu giao tiếp trực tiếp với memory qua cơ chế DMA, di chuyển CPU thông qua Cache. Và trong quá trình đó thì các lệnh vẫn thực thi qua chu kỳ đó.
----QUIZ----
Câu 1: Ngắt chuyển điều khiển đến interrupt service routine thông qua thành phần nào?
Answer key: interrupt vector (chứa địa chỉ của tất cả các service routine).
Câu 2: Trong các loại bộ nhớ SSD, RAM, Cache, Register, bộ nhớ nào có tốc độ truy xuất chậm nhất?
Answer key: SSD.
Câu 3: Một máy tính hiện nay gồm CPU (một hoặc nhiều) và các trình điều khiển thiết bị (device controller) kết nối với nhau thông qua bus để truy xuất ...
Answer key: bộ nhớ chia sẻ
III. Kiến trúc hệ thống máy tính:
- Hệ thống đơn bộ xử lý (Single-Processor Systems).
- Hệ thống đa bộ xử lý (Multiprocessor Systems).
= Hệ thống gom cụm (Clustered Systems).
- Phân biệt các khái niệm về bộ xử lý:
+ CPU (Central Processor Unit) - Thành phần phần cứng thực thi các lệnh.
+ Processor (bộ xử lý) - Một con chip (vật lý) chứa một hoặc nhiều CPU.
+ Core (lõi/nhân) - Đơn vị tính toán cơ bản của CPU.
+ Multicore (đa lõi) - Bao gồm nhiều lõi tính toán trên cùng một CPU.
+ Multiprocessor (đa bộ xử lý) - Bao gồm nhiều bộ xử lý.
3.1. Hệ thống đơn bộ xử lý:
- Chỉ có một bộ xử lý đa dụng (general-purpose processor) với một lõi duy nhất: thực thi các tập lệnh đa dụng (bao gồm các lệnh trong các tiến trình).
- Có thể kèm theo các bộ xử lý riêng biệt (special-purpose): chỉ có thể thực thi các tập lệnh hạn chế và không thể chạy tiến trình.
3.2. Hệ thống đa bộ xử lý:
- Tên gọi khác: parallel systems, tightly-coupled systems.
- Ưu điểm:
+ Tăng cường năng suất hệ thống (system throughput): càng nhiều bộ xử lý thì càng nhanh xong công việc.
+ Kinh tế: ít tốn kém vì có thể dùng chung tài nguyên (đĩa...)
+ Độ tin cậy cao: khi một bộ xử lý hỏng thì công việc của nó được chia sẻ giữa các bộ xử lý còn lại.
- Phân loại: 
+ Đa xử lý bất đối xứng (asymmetric multiprocessing) - một bộ xử lý thực thi công việc khác nhau.
+ Đa xử lý đối xứng (symmetric multiprocessing) - một bộ xử lý cùng thực hiện tất cả công việc.
- Kiến trúc đa xử lý đối xứng: 
Hai processor, mỗi processor có CPU riêng, có register và cache riêng và 2 processor dùng chung một main memory.
Kiến trúc có nhiều CPU, main thông thường thì không dùng.
- Thiết kế nhân kép (dual): 
1 processor, có nhiều core, mỗi core có tập thanh ghi và cache cấp độ riêng rùi nó giao tiếp cache cấp độ 2, 3 rùi mới chuyển tới main memory.
- Hệ thống NUMA (Non-Uniform Memory Access):
Mỗi CPU có 1 phân vùng nhớ riêng, 1 RAM riêng và giao tiếp với nhau bằng interconnect.
3.3. Hệ thống gom cụm:
- Là một dạng hệ thống đa bộ xử lý, nhưng gồm nhiều hệ thống làm việc với nhau:
+ Thường chia sẻ không gian lưu trữ qua mạng lưu trữ khu vực (storage-area network - SAN).
+ Cung cấp các dịch vụ có độ sẵn sàng cao (high-availability): dịch vụ được cung cấp liên tục cho dù một phần cứng của cụm bị hỏng.
+ Có thể theo cấu trúc đối xứng hoặc bất đối xứng:
  Gom cụm bất đối xứng (asymmetric clustering): một máy ở chế độ (mode) hot-standby, các máy còn lại chạy ứng dụng.
  Gom cụm đối xứng (symmetric clustering): nhiều nút (node) chạy ứng dụng và giám sát các nút còn lại.
- Cấu trúc: gồm các hệ thống tính toán giao tiếp với nhau qua interconnect, giao tiếp với nhau qua storage-area network. Thì những hệ thống gom cụm được sử dụng trong cloud computing và các nhà cung cấp dịch vụ về lưu trữ hiện nay như AWS,...
IV. Các thao tác trong hệ điều hành:
- Chương trình Bootstrap - đoạn code đơn giản trong firmware của phần cứng máy tính để khởi dộng hệ thống, nạp nhân.
- Nạp nhân.
- Khởi động hệ thống nền (các dịch vụ bên ngoài nhân).
- Điều khiển ngắt của nhân (phần cứng và phần mềm).
+ Ngắt phần cứng.
+ Ngắt phần mềm (ngoại lệ hoặc bẫy):
  Lỗi phần mềm (ví dụ phép chia cho 0).
  Yêu cầu các dịch vụ của hệ điều hành - system call.
  Những vấn đề khác bao gồm vòng lặp vô hạn, các quy trình sửa đổi lẫn nhau hoặc hệ điều hành.
- Đơn chương (uniprogramming), đa chương (multiprogramming) và đa nhiệm (multitasking).
- Các chế độ hoạt động (modes of operation).
- Timer.
4.1. Đơn chương:
- Chỉ có một công việc (job)/chương trình được nạp vào bộ nhớ tại một thời điểm.
- Công việc/chương trình được thi hành tuần tự.
4.2. Đa chương:
- Đa chương tổ chức các công việc, bao gồm mã và dữ liệu, sao cho CPU luôn có thể chọn 1 để thực thi:
+ Nhiều công việc được nạp đồng thời vào bộ nhớ.
+ Một công việc được chọn và chạy bởi bộ định thời công việc (job scheduling).
+ Khi một công việc phải chờ, hệ điều hành chuyển sang (switch) thực thi công việc khác.
- Trong hệ thống đa chương, một công việc đang thực thi được gọi là một tiến trình (process).
- Đa chương giúp tận dụng được thời gian rảnh, tăng hiệu suất sử dụng CPU (CPU utilization).
- Mô hình cấu trúc bộ nhớ: dành 1 phần cho hệ điều hành, phần còn lại nạp vào. Khi các chương trình được nạp vào, thì được sắp xếp trong cấu trúc bộ nhớ, CPU thực thi từng chương trình đến khi kết thúc tác vụ hay thực hiện I/O.
- Đa nhiệm là một sự mở rộng của đa chương - CPU chuyển các công việc thường xuyên hơn để người dùng có thể tương tác với từng công việc khi nó đang chay.
Ví dụ: Có thể mở cùng lúc nhiều chương trình cùng 1 lúc: có thể nghe nhạc, đánh văn bản,...
4.3. Các chế độ hoạt động:
- Việc có nhiều chế độ hoạt động cho phép hệ điều hành bảo vệ chính nó và các thành phần khác của hệ thông.
+ Hai chế độ cơ bản: Chế độ người dùng (user mode) và chế độ hạt nhân (kernel mode).
+ Có thể mở rộng nhiều hơn 2 chế độ.
- Bit chế độ được thêm vào phần cứng:
+ Dùng để phân biệt khi nào thì hệ thống đang thực thi mã người dùng hay mã hạt nhân.
+ Khi một ứng dụng của người dùng thực thi thì bit chế độ là 'người dùng'.
+ Khi mã trong hạt nhân thực thi thì bit chế độ là 'hạt nhân'.
- Một số lệnh được thiết kế như đặc quyền (priviledged), các lệnh này chỉ thực thi ở chế độ hạt nhân.
- Chuyển chế độ người dùng sang chế độ hạt nhân: Khi user đang thực thi tiến trình người dùng và trong quá trình thực thi user, có gọi system call tới kernel sẽ có 1 cái trap sẽ chuyển mode thành 0 và chuyển mode bit kernel và xong thì mode bit là 1 và thành chế độ người dùng.
4.4. Timer:
- Timer được sử dụng để ngăn vòng lặp vô hạn hoặc tiến trình chiếm dụng quá nhiều tài nguyên (resource hog).
+ Dùng timmer để ngắt máy tính sau một khoảng thời gian:
  Timer có thể cài đặt gồm một bộ đếm và giá trị clock cố định.
  Hệ điều hành thiết lập giá trị bộ đếm bằng các lệnh đặc quyền.
  Mỗi khi clock tick, giá trị bộ đếm giảm dần.
  Bộ đếm bằng 0 sẽ phát sinh một ngắt.
  Quyền điều khiển sẽ tự động chuyển về cho hệ điều hành khi ngắt được kích hoạt.
